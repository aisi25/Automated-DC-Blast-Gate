
#define SIM 0 //Keep it 0
#define TEST_MODE 1  //To disable testing set it to 0
#define TOTAL_GATES 8
#define RELAY_1_PIN A0  //Channel 1 connection
#define RELAY_2_PIN A1  //Channel 2 connection
const int PUSH_BUTTON_PINS[TOTAL_GATES] = {2, 3, 4, 5, 6, 7, 8, 9};
#define GATE_CLOSE_WAIT 5000 //milliseconds
#define CLOSE_ALL_BTN_PIN A2
#define OPEN_ALL_BTN_PIN A3
#define POWER_RELAY_PIN 10


const int gateMinMax_pwm[TOTAL_GATES][2] = {  //(out of 4096)
  /*open, close*/
  {250, 415}, //Gate 1
  {230, 405}, //Gate 2
  {230, 405}, //Gate 3
  {285, 425}, //Gate 4
  {250, 405}, //Gate 5
  {250, 415}, //Gate 6
  {250, 405}, //Gate 7
  {250, 415}, //Gate 8
};

const int gateOpenClose_angle[TOTAL_GATES][2] = {  //0 to 180, you can also put inverse angles i.e (180, 0)
  /*close, open*/
  {0, 180}, //Gate 1
  {0, 180}, //Gate 2
  {0, 180}, //Gate 3
  {0, 180}, //Gate 4
  {0, 180}, //Gate 5
  {0, 180}, //Gate 6
  {0, 180}, //Gate 7
  {0, 180}, //Gate 8
};

const int LED_red_green[TOTAL_GATES][2] = {  //pin numbers for red and green LEDs for each gate
  /*red, green*/
  {11, 12}, //Gate 1
  {11, 13}, //Gate 2
  {11, 12}, //Gate 3
  {11, 13}, //Gate 4
  {11, 12}, //Gate 5
  {11, 13}, //Gate 6
  {11, 12}, //Gate 7
  {11, 13}, //Gate 8
};



#include <Wire.h>
#if !SIM
#include <Adafruit_PWMServoDriver.h>
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();
#else
#include <Servo.h>
Servo servos;
#endif

// Depending on your servo make, the pulse width min and max may vary, you
// want these to be as small/large as possible without hitting the hard stop
// for max range. You'll have to tweak them as necessary to match the servos you
// have!
#define OPEN_GATE 1
#define CLOSE_GATE 0

boolean btn_states[TOTAL_GATES];
boolean gate_states[TOTAL_GATES];
boolean close_all_btn = 0;
boolean open_all_btn = 0;
boolean motor_state = LOW;
unsigned long power_relay_timer = 0;
boolean power_relay_state = LOW;

void setup()
{
  pinMode(POWER_RELAY_PIN, OUTPUT);
  digitalWrite(POWER_RELAY_PIN, power_relay_state);
  Serial.begin(9600);
  Serial.println(F("Start"));
  for (int i = 0; i < TOTAL_GATES; i++)
  {
    gate_states[i] = CLOSE_GATE;
    btn_states[i] = 0;
    pinMode(PUSH_BUTTON_PINS[i], INPUT_PULLUP);
    pinMode(LED_red_green[i][0], OUTPUT);
    pinMode(LED_red_green[i][1], OUTPUT);
    digitalWrite(LED_red_green[i][0], HIGH);
    digitalWrite(LED_red_green[i][1], LOW);
  }
  pinMode(CLOSE_ALL_BTN_PIN, INPUT_PULLUP);
  pinMode(OPEN_ALL_BTN_PIN, INPUT_PULLUP);
  pinMode(RELAY_1_PIN, OUTPUT);
  pinMode(RELAY_2_PIN, OUTPUT);
  idle_pump();

  power_relay_state = HIGH;
  digitalWrite(POWER_RELAY_PIN, power_relay_state);
  delay(10);
  init_servos();

  delay(10);

#if TEST_MODE
  Serial.println(F("This is TEST_MODE"));
  Serial.println(F("ON Relay 1"));
  digitalWrite(RELAY_1_PIN, HIGH);
  delay(2000);
  Serial.println(F("OFF Relay 1"));
  digitalWrite(RELAY_1_PIN, LOW);
  delay(500);

  Serial.println(F("ON Relay 2"));
  digitalWrite(RELAY_2_PIN, HIGH);
  delay(2000);
  Serial.println(F("OFF Relay 2"));
  digitalWrite(RELAY_2_PIN, LOW);
  delay(1000);


  Serial.println(F("Opening all gates"));
  for (int i = 0; i < TOTAL_GATES; i++)
  {
    move_Gate(i, OPEN_GATE);
  }
  delay(2000);

  Serial.println("TESTING END");
#endif

  Serial.println(F("Closing all gates"));
  for (int i = 0; i < TOTAL_GATES; i++)
  {
    move_Gate(i, CLOSE_GATE);
  }
  delay(10);

  Serial.println(check_button_push(2));
  Serial.println(F("Press any button"));
}

unsigned long timerx = 0;

void loop()
{
  for (int i = 0; i < TOTAL_GATES; i++)
  {
    if (check_button_push(PUSH_BUTTON_PINS[i]))
    {
      if (btn_states[i] == 0)
      {
        btn_states[i] = 1;
        Serial.print(F("Pressed button\t")); Serial.println(i + 1);
        if (gate_states[i] == CLOSE_GATE)
        {
          for (int k = 0; k < TOTAL_GATES; k++)
          {
            if ((k != i) && (gate_states[k] == OPEN_GATE))
              move_Gate(k, CLOSE_GATE);
          }
          move_Gate(i, OPEN_GATE);
          switch_on_pump();
        }
        else
        {
          switch_off_pump();
          timerx = millis() + GATE_CLOSE_WAIT;
        }
      }
    }
    else
    {
      btn_states[i] = 0;
    }
  }



  if ((motor_state == LOW) && (millis() > timerx))
  {
    for (int i = 0; i < TOTAL_GATES; i++)
    {
      if (gate_states[i] != CLOSE_GATE)
        move_Gate(i, CLOSE_GATE);
    }
  }
  else if (motor_state == HIGH)
  {
    boolean check_gate_open = 0;
    for (int i = 0; i < TOTAL_GATES; i++)
    {
      if (gate_states[i] == OPEN_GATE)
      {
        check_gate_open = 1;
      }
    }
    if (!check_gate_open)
    {
      switch_off_pump();
      Serial.println(F("OFF MOTOR BCZ ALL GATES CLOSED"));
    }
  }





  if (check_button_push(CLOSE_ALL_BTN_PIN))
  {
    if (close_all_btn == 0)
    {
      Serial.print(F("Pressed button\t")); Serial.println("CLOSE ALL");
      close_all_btn = 1;

      switch_off_pump();
      timerx = millis() + GATE_CLOSE_WAIT;
    }
  }
  else
  {
    close_all_btn = 0;
  }

  if (check_button_push(OPEN_ALL_BTN_PIN))
  {
    if (open_all_btn == 0)
    {
      Serial.print(F("Pressed button\t")); Serial.println("OPEN ALL");
      open_all_btn = 1;
      for (int i = 0; i < TOTAL_GATES; i++)
      {
        if (gate_states[i] != OPEN_GATE)
          move_Gate(i, OPEN_GATE);
      }
      switch_on_pump();
    }
  }
  else
  {
    open_all_btn = 0;
  }

  if ((power_relay_state==HIGH) && ((millis() - power_relay_timer) > 2000))
  {
    power_relay_state = LOW;
    digitalWrite(POWER_RELAY_PIN, power_relay_state);
    Serial.println("Power off");
  }



}

void switch_on_pump()
{
  if (motor_state != HIGH)
  {
    Serial.println("A0 Click");
    digitalWrite(RELAY_1_PIN, HIGH);  //Channel 1 closes (NO)
    delay(1000);
    digitalWrite(RELAY_1_PIN, LOW); //Channel 1 opens (NO)
    motor_state = HIGH;
  }
}


void switch_off_pump()
{
  if (motor_state != LOW)
  {
    Serial.println("A1 Click");
    digitalWrite(RELAY_2_PIN, HIGH);  //Channel 2 closes (NO)
    delay(1000);
    digitalWrite(RELAY_2_PIN, LOW); //Channel 2 opens  (NO)
    motor_state = LOW;
  }
}


void idle_pump()
{
  digitalWrite(RELAY_1_PIN, LOW);
  digitalWrite(RELAY_2_PIN, LOW);
}

boolean check_button_push(int pinnum)
{
  if ((digitalRead(pinnum) == LOW) && (digitalRead(pinnum) == LOW))
  {
    delay(1);
    if (digitalRead(pinnum) == LOW)
    {
      delay(10);
      if (digitalRead(pinnum) == LOW)
      {
        return true;
      }
    }
  }
  return false;
}



void move_Gate(uint8_t gate_num, boolean now_state)
{
  if (power_relay_state == LOW)
  {
    power_relay_state = HIGH;
    digitalWrite(POWER_RELAY_PIN, power_relay_state);
    Serial.println("Power On");
    delay(50);
  }

  uint16_t now_degrees = gateOpenClose_angle[gate_num][1];
  if (now_state == OPEN_GATE)
  {
    digitalWrite(LED_red_green[gate_num][0], LOW);
    digitalWrite(LED_red_green[gate_num][1], HIGH);
    Serial.print("OPEN \tG: "); Serial.println(gate_num + 1);
    now_degrees = gateOpenClose_angle[gate_num][1];
    gate_states[gate_num] = OPEN_GATE;
  }
  else
  {
    digitalWrite(LED_red_green[gate_num][0], HIGH);
    digitalWrite(LED_red_green[gate_num][1], LOW);
    Serial.print("CLOSE \tG: "); Serial.println(gate_num + 1);
    now_degrees = gateOpenClose_angle[gate_num][0];
    gate_states[gate_num] = CLOSE_GATE;
  }

#if !SIM
  uint16_t pulselength = map(now_degrees, 0, 180, gateMinMax_pwm[gate_num][0], gateMinMax_pwm[gate_num][1]);
  pwm.setPWM(gate_num, 0, pulselength);
#else
  if (now_degrees > 10)
    now_degrees = 90;

  servos.write(now_degrees);
  Serial.print("Servo: "); Serial.println(now_degrees);
#endif

  power_relay_timer = millis();
}

void init_servos()
{
#if !SIM
  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates
#else
  for (int i = 0; i < TOTAL_GATES; i++)
  {
    servos.attach(10);
    servos.write(0);
  }
#endif
}
